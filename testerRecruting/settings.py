"""
Django settings for testerRecruting project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import io
import os
from pathlib import Path
import logging
import environ
from django.contrib import messages
from google.cloud import secretmanager

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    DEBUG=(bool, False),
    GOOGLE_CLOUD_PROJECT=(str, None),
    USE_GCP_SECRETS=(bool, False),
)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_bootstrap5',
    'baseApp'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'testerRecruting.middleware.AdminPermissionMiddleware',
]

ROOT_URLCONF = 'testerRecruting.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

#media directory
MEDIA_ROOT = os.path.join(BASE_DIR, './')
MEDIA_URL = '/'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Load environment variables from .env file
env.read_env(os.path.join(BASE_DIR, ".env"))

if env("DEBUG", default=True):
    # デバッグモードでは .env ファイルから環境変数を取得
    SECRET_KEY = env("DJANGO_SECRET_KEY")
    DEBUG = env("DJANGO_DEBUG")
    ALLOWED_HOSTS = env.list("D_DJANGO_ALLOWED_HOSTS")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': env("D_MYSQL_DATABASE"),
            'USER': env("D_MYSQL_USER"),
            'PASSWORD': env("D_MYSQL_ROOT_PASSWORD"),
            'HOST': env("D_MYSQL_HOST"),
            'PORT': env("D_MYSQL_PORT"),
        }
    }
    EMAIL_HOST = env("DJANGO_EMAIL")
    EMAIL_PORT = env("DJANGO_EMAIL_PORT")
    EMAIL_USE_TLS = env.bool("DJANGO_EMAIL_USE_TLS", default=False)
    EMAIL_HOST_USER = env("DJANGO_EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = env("DJANGO_EMAIL_HOST_PASSWORD")
    DEFAULT_FROM_EMAIL = env("DJANGO_DEFAULT_FROM_EMAIL")
    CONTACT_EMAIL = [env("DJANGO_CONTACT_EMAIL")]
else:
    # 本番環境では GCP Secret Manager を使用
    USE_GCP_SECRETS = env("USE_GCP_SECRETS")
    if USE_GCP_SECRETS:
        try:
            # Pull secrets from Secret Manager
            project_id = env("GOOGLE_CLOUD_PROJECT")
            client = secretmanager.SecretManagerServiceClient()
            settings_name = env("SETTINGS_NAME", default="django_settings")
            name = f"projects/{project_id}/secrets/{settings_name}/versions/latest"
            payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")
            env.read_env(io.StringIO(payload))
        except Exception as e:
            print(f"Error loading secrets from GCP: {e}")
            # Fallback to local .env file
            pass
    
    SECRET_KEY = env("DJANGO_SECRET_KEY")
    DEBUG = env.bool("DJANGO_DEBUG", default=False)
    ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': env("MYSQL_DATABASE"),
            'USER': env("MYSQL_USER"),
            'PASSWORD': env("MYSQL_PASSWORD"),
            'HOST': env("MYSQL_HOST"),
            'PORT': env("MYSQL_PORT"),
        }
    }
    EMAIL_HOST = env("DJANGO_EMAIL")
    EMAIL_PORT = env("DJANGO_EMAIL_PORT")
    EMAIL_USE_TLS = env.bool("DJANGO_EMAIL_USE_TLS", default=False)
    EMAIL_HOST_USER = env("DJANGO_EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = env("DJANGO_EMAIL_HOST_PASSWORD")
    DEFAULT_FROM_EMAIL = env("DJANGO_DEFAULT_FROM_EMAIL")
    CONTACT_EMAIL = [env("DJANGO_CONTACT_EMAIL")]


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, '/static')  # ここで静的ファイルが収集されるディレクトリ

WSGI_APPLICATION = 'testerRecruting.wsgi.application'


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 登録に使用するユーザーモデル
AUTH_USER_MODEL = 'baseApp.CustomUser'

#認証用トークン有効期限
ACTIVATION_TIMEOUT_SECONDS = 60*60*24

SITE_ID = 1 

DEFAULT_PROFILE_IMAGE_PATH = 'baseApp/images/user/profile/defalt.png'

# アプリケーション全体で使用するロガーの設定
logger = logging.getLogger(__name__)

# 使用例
logger.info("アプリケーションが起動しました")
logger.debug("これはデバッグメッセージです")
logger.error("エラーが発生しました", exc_info=True)

#MESSAGE LEVEL
MESSAGE_TAGS = {
    messages.ERROR: 'alert alert-danger',
    messages.WARNING: 'alert alert-warning',
    messages.SUCCESS: 'alert alert-success',
    messages.INFO: 'alert alert-info'
}

#Login url
LOGIN_URL = 'register/'