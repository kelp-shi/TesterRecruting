# Generated by Django 4.2.15 on 2024-08-17 13:49

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('UserBirth', models.DateField(blank=True, null=True)),
                ('UserGender', models.CharField(blank=True, choices=[('Man', 'MAN'), ('Women', 'WOMEN'), ('Other', 'OTHER')], default='Other', max_length=50, null=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('profile_img', models.ImageField(blank=True, default='baseApp/images/user/profile/defalt.png', null=True, upload_to='baseApp/images/user/profile/')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='BannerImg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bannerTitle', models.CharField(max_length=255)),
                ('bannerImg', models.ImageField(upload_to='baseApp/images/org/banner')),
                ('activeFlg', models.BooleanField(default=False)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DmRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('delFlg', models.BooleanField(default=False)),
                ('Member', models.ManyToManyField(related_name='room', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TestPost',
            fields=[
                ('id', models.BigIntegerField(blank=True, primary_key=True, serialize=False, unique=True)),
                ('PostName', models.CharField(max_length=100, verbose_name='Post Name')),
                ('Discription', models.TextField(max_length=5000, verbose_name='Discription')),
                ('RecrutingNum', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Recruting People')),
                ('ApplyNum', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Apply People')),
                ('TestType', models.IntegerField(choices=[(1, 'Game'), (2, 'Application')], default=1, verbose_name='Test Type')),
                ('TestTypeSubcls', models.CharField(choices=[('アートとデザイン', 'ART_AND_DESIGN'), ('自動車と乗り物', 'AUTO_AND_VEHICLES'), ('美容', 'BEAUTY'), ('書籍と参照', 'BOOKS_AND_REFERENCE'), ('ビジネス', 'BUSINESS'), ('コミック', 'COMICS'), ('通信', 'COMMUNICATIONS'), ('デート', 'DATING'), ('教育', 'EDUCATION'), ('エンターテイメント', 'ENTERTAINMENT'), ('イベント', 'EVENTS'), ('財務', 'FINANCE'), ('食品と飲料', 'FOOD_AND_DRINK'), ('健康とフィットネス', 'HEALTH_AND_FITNESS'), ('家と家庭', 'HOUSE_AND_HOME'), ('ライブラリとデモ', 'LIBRARIES_AND_DEMO'), ('ライフスタイル', 'LIFESTYLE'), ('地図とナビゲーション', 'MAPS_AND_NAVIGATION'), ('医療', 'MEDICAL'), ('音楽と音声', 'MUSIC_AND_AUDIO'), ('ニュースと雑誌', 'NEWS_AND_MAGAZINES'), ('親子', 'PARENTING'), ('個人化', 'PERSONALIZATION'), ('写真撮影', 'PHOTOGRAPHY'), ('生産性', 'PRODUCTIVITY'), ('買い物', 'SHOPPING'), ('ソーシャル', 'SOCIAL'), ('スポーツ', 'SPORTS'), ('ツール', 'TOOLS'), ('旅行と地元', 'TRAVEL_AND_LOCAL'), ('ビデオプレイヤーとエディター', 'VIDEO_PLAYERS_AND_EDITORS'), ('天気', 'WEATHER')], default='アートとデザイン', max_length=100)),
                ('RecrutingPeriodFlg', models.BooleanField(default=True, verbose_name='Recruting presence or absence Flag')),
                ('RecrutingPeriodSt', models.DateTimeField(verbose_name='Recruting Period Start')),
                ('RecrutingPeriodEnd', models.DateTimeField(verbose_name='Recruting Period End')),
                ('TestStart', models.DateTimeField(verbose_name='Test Start')),
                ('TestEnd', models.DateTimeField(verbose_name='Test End')),
                ('DelFlg', models.BooleanField(default=False, verbose_name='Delete Flag')),
                ('Create_dt', models.DateTimeField(auto_now_add=True)),
                ('CreateUser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='news',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('NewsTitle', models.CharField(max_length=150)),
                ('Newsinner', models.TextField(max_length=5000)),
                ('Create_at', models.DateTimeField(auto_now_add=True)),
                ('CreateUser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('RelatedBanner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseApp.bannerimg')),
            ],
        ),
        migrations.CreateModel(
            name='Massage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Text', models.TextField(verbose_name='メッセージ内容')),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('ReadFlg', models.BooleanField(default=False)),
                ('Room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_room', to='baseApp.dmroom')),
                ('Sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='JoinRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AppealText', models.TextField(max_length=5000, verbose_name='Appeal')),
                ('authorizationFlg', models.BooleanField(default=False)),
                ('Create_dt', models.DateTimeField(auto_now_add=True)),
                ('Sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('SubjectTest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseApp.testpost')),
            ],
        ),
        migrations.AddField(
            model_name='dmroom',
            name='TargetTest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targetTest', to='baseApp.testpost'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='DoneTest',
            field=models.ManyToManyField(blank=True, related_name='done_tests', to='baseApp.testpost'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='MyTest',
            field=models.ManyToManyField(blank=True, related_name='create_user', to='baseApp.testpost'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='RunningTest',
            field=models.ManyToManyField(blank=True, related_name='running_tests', to='baseApp.testpost'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
